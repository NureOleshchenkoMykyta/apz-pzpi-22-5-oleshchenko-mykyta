// Generated by view binder compiler. Do not edit!
package com.example.apz.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.Spinner;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.apz.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityResultsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final Button addNoteButton;

  @NonNull
  public final Button addResultButton;

  @NonNull
  public final Button buttonLogout;

  @NonNull
  public final LinearLayout mainContainer;

  @NonNull
  public final LinearLayout notesContainer;

  @NonNull
  public final LinearLayout resultsContainer;

  @NonNull
  public final ScrollView scrollView;

  @NonNull
  public final Spinner sortSpinner;

  @NonNull
  public final EditText stressLevelInput;

  private ActivityResultsBinding(@NonNull ScrollView rootView, @NonNull Button addNoteButton,
      @NonNull Button addResultButton, @NonNull Button buttonLogout,
      @NonNull LinearLayout mainContainer, @NonNull LinearLayout notesContainer,
      @NonNull LinearLayout resultsContainer, @NonNull ScrollView scrollView,
      @NonNull Spinner sortSpinner, @NonNull EditText stressLevelInput) {
    this.rootView = rootView;
    this.addNoteButton = addNoteButton;
    this.addResultButton = addResultButton;
    this.buttonLogout = buttonLogout;
    this.mainContainer = mainContainer;
    this.notesContainer = notesContainer;
    this.resultsContainer = resultsContainer;
    this.scrollView = scrollView;
    this.sortSpinner = sortSpinner;
    this.stressLevelInput = stressLevelInput;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityResultsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityResultsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_results, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityResultsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addNoteButton;
      Button addNoteButton = ViewBindings.findChildViewById(rootView, id);
      if (addNoteButton == null) {
        break missingId;
      }

      id = R.id.addResultButton;
      Button addResultButton = ViewBindings.findChildViewById(rootView, id);
      if (addResultButton == null) {
        break missingId;
      }

      id = R.id.buttonLogout;
      Button buttonLogout = ViewBindings.findChildViewById(rootView, id);
      if (buttonLogout == null) {
        break missingId;
      }

      id = R.id.mainContainer;
      LinearLayout mainContainer = ViewBindings.findChildViewById(rootView, id);
      if (mainContainer == null) {
        break missingId;
      }

      id = R.id.notesContainer;
      LinearLayout notesContainer = ViewBindings.findChildViewById(rootView, id);
      if (notesContainer == null) {
        break missingId;
      }

      id = R.id.resultsContainer;
      LinearLayout resultsContainer = ViewBindings.findChildViewById(rootView, id);
      if (resultsContainer == null) {
        break missingId;
      }

      ScrollView scrollView = (ScrollView) rootView;

      id = R.id.sortSpinner;
      Spinner sortSpinner = ViewBindings.findChildViewById(rootView, id);
      if (sortSpinner == null) {
        break missingId;
      }

      id = R.id.stressLevelInput;
      EditText stressLevelInput = ViewBindings.findChildViewById(rootView, id);
      if (stressLevelInput == null) {
        break missingId;
      }

      return new ActivityResultsBinding((ScrollView) rootView, addNoteButton, addResultButton,
          buttonLogout, mainContainer, notesContainer, resultsContainer, scrollView, sortSpinner,
          stressLevelInput);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
